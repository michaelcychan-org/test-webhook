<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="48" failures="0" errors="0" time="4.723">
  <testsuite name="ConfigFileConverter" errors="0" failures="0" skipped="0" timestamp="2024-07-03T13:22:43" time="4.037" tests="3">
    <testcase classname="ConfigFileConverter config.yaml converts a correct class A config file" name="ConfigFileConverter config.yaml converts a correct class A config file" time="0.019">
    </testcase>
    <testcase classname="ConfigFileConverter config.yaml converts a correct class B config file" name="ConfigFileConverter config.yaml converts a correct class B config file" time="0.007">
    </testcase>
    <testcase classname="ConfigFileConverter config.yaml converts a correct class C config file" name="ConfigFileConverter config.yaml converts a correct class C config file" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="SoupListGenerator" errors="0" failures="0" skipped="6" timestamp="2024-07-03T13:22:43" time="4.056" tests="5">
    <testcase classname="SoupListGenerator .convertYamlToJson() returns a right object with 0 warning message" name="SoupListGenerator .convertYamlToJson() returns a right object with 0 warning message" time="0.056">
    </testcase>
    <testcase classname="SoupListGenerator .convertYamlToJson() returns a right object with warning messages" name="SoupListGenerator .convertYamlToJson() returns a right object with warning messages" time="0.012">
    </testcase>
    <testcase classname="SoupListGenerator .convertYamlToJson() returns an error string when file is empty" name="SoupListGenerator .convertYamlToJson() returns an error string when file is empty" time="0">
    </testcase>
    <testcase classname="SoupListGenerator .convertYamlToJson() returns an error string when file does not have Name key" name="SoupListGenerator .convertYamlToJson() returns an error string when file does not have Name key" time="0.012">
    </testcase>
    <testcase classname="SoupListGenerator .generateSoupList() produces 1 SOUPList.md" name="SoupListGenerator .generateSoupList() produces 1 SOUPList.md" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="Menu Generator" errors="0" failures="0" skipped="0" timestamp="2024-07-03T13:22:43" time="4.214" tests="2">
    <testcase classname="Menu Generator should return a Left Object if file has no front matter" name="Menu Generator should return a Left Object if file has no front matter" time="0.009">
    </testcase>
    <testcase classname="Menu Generator should return an updated menu when some files can be properly processed" name="Menu Generator should return an updated menu when some files can be properly processed" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="GenerateDocumentation" errors="0" failures="0" skipped="0" timestamp="2024-07-03T13:22:43" time="4.371" tests="10">
    <testcase classname="GenerateDocumentation Error handling returns status code 500 when upload fails" name="GenerateDocumentation Error handling returns status code 500 when upload fails" time="0.008">
    </testcase>
    <testcase classname="GenerateDocumentation Error handling returns status 500 when sending Event fails" name="GenerateDocumentation Error handling returns status 500 when sending Event fails" time="0.001">
    </testcase>
    <testcase classname="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Push Event" name="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Push Event" time="0.001">
    </testcase>
    <testcase classname="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Push Event with no soup.yaml files" name="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Push Event with no soup.yaml files" time="0.001">
    </testcase>
    <testcase classname="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Push Event with errors from generating menu" name="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Push Event with errors from generating menu" time="0">
    </testcase>
    <testcase classname="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Push Event - skip paths that should be ignored" name="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Push Event - skip paths that should be ignored" time="0.001">
    </testcase>
    <testcase classname="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Tag Creation Event" name="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Tag Creation Event" time="0.001">
    </testcase>
    <testcase classname="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Pull Request Opened Event" name="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Pull Request Opened Event" time="0">
    </testcase>
    <testcase classname="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Pull Request Synchronize Event" name="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Pull Request Synchronize Event" time="0.001">
    </testcase>
    <testcase classname="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Pull Request Edited Event" name="GenerateDocumentation Green paths - upload Generated Doc and Menu to S3, sends event to EventBridge when non-fatal errors from invalid souop and menu generation are encountered GitHub Pull Request Edited Event" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="DocumentGenerator" errors="0" failures="0" skipped="0" timestamp="2024-07-03T13:22:43" time="4.525" tests="28">
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown produces 15 documents" name="DocumentGenerator generateDocumentationsInMarkdown produces 15 documents" time="0.052">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown Software Classification produces documentation for Class A - Question 1 is false - from push" name="DocumentGenerator generateDocumentationsInMarkdown Software Classification produces documentation for Class A - Question 1 is false - from push" time="0.025">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown Software Classification produces documentation for Class A with multiple line rationale - from push" name="DocumentGenerator generateDocumentationsInMarkdown Software Classification produces documentation for Class A with multiple line rationale - from push" time="0.018">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown Software Classification produces documentation for Class A - Question 2 is false - from push" name="DocumentGenerator generateDocumentationsInMarkdown Software Classification produces documentation for Class A - Question 2 is false - from push" time="0.016">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown Software Classification produces documentation for Class B - from push" name="DocumentGenerator generateDocumentationsInMarkdown Software Classification produces documentation for Class B - from push" time="0.016">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown Software Classification produces documentation for Class C - from push" name="DocumentGenerator generateDocumentationsInMarkdown Software Classification produces documentation for Class C - from push" time="0.016">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown Software Classification produces documentation for Class A - Question 2 is false - from pull" name="DocumentGenerator generateDocumentationsInMarkdown Software Classification produces documentation for Class A - Question 2 is false - from pull" time="0.015">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown SoftwareDevelopmentPlan produces documentation for Class A" name="DocumentGenerator generateDocumentationsInMarkdown SoftwareDevelopmentPlan produces documentation for Class A" time="0.018">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown SoftwareDevelopmentPlan produces documentation for Class B" name="DocumentGenerator generateDocumentationsInMarkdown SoftwareDevelopmentPlan produces documentation for Class B" time="0.02">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown SoftwareDevelopmentPlan produces documentation for Class C" name="DocumentGenerator generateDocumentationsInMarkdown SoftwareDevelopmentPlan produces documentation for Class C" time="0.018">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown SoftwareDevelopmentSOP produces the documentation" name="DocumentGenerator generateDocumentationsInMarkdown SoftwareDevelopmentSOP produces the documentation" time="0.022">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown SoftwareRiskManagement produces the documentation for a pull request" name="DocumentGenerator generateDocumentationsInMarkdown SoftwareRiskManagement produces the documentation for a pull request" time="0.018">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown SoftwareRiskManagement produces the documentation for tag creation (with version number)" name="DocumentGenerator generateDocumentationsInMarkdown SoftwareRiskManagement produces the documentation for tag creation (with version number)" time="0.015">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown QualityPlan produces the documentation" name="DocumentGenerator generateDocumentationsInMarkdown QualityPlan produces the documentation" time="0.014">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown RiskManagement produces the documentation" name="DocumentGenerator generateDocumentationsInMarkdown RiskManagement produces the documentation" time="0.016">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown SoftwareVerificationPlan produces documentation for Class A" name="DocumentGenerator generateDocumentationsInMarkdown SoftwareVerificationPlan produces documentation for Class A" time="0.015">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown SoftwareVerificationPlan produces documentation for Class B" name="DocumentGenerator generateDocumentationsInMarkdown SoftwareVerificationPlan produces documentation for Class B" time="0.013">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown SoftwareVerificationPlan produces documentation for Class C" name="DocumentGenerator generateDocumentationsInMarkdown SoftwareVerificationPlan produces documentation for Class C" time="0.015">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown SoftwareConfigurationPlan - No Content yet produces documentation" name="DocumentGenerator generateDocumentationsInMarkdown SoftwareConfigurationPlan - No Content yet produces documentation" time="0.013">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown SoftwareReleaseSOP produces documentation" name="DocumentGenerator generateDocumentationsInMarkdown SoftwareReleaseSOP produces documentation" time="0.014">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown TestMethodsSOP produces documentation for Class A" name="DocumentGenerator generateDocumentationsInMarkdown TestMethodsSOP produces documentation for Class A" time="0.013">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown TestMethodsSOP produces documentation for Class B" name="DocumentGenerator generateDocumentationsInMarkdown TestMethodsSOP produces documentation for Class B" time="0.015">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown ProgrammersGuide produces documentation" name="DocumentGenerator generateDocumentationsInMarkdown ProgrammersGuide produces documentation" time="0.014">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown FieldSafetyNoticeReportTemplate produces documentation with version number" name="DocumentGenerator generateDocumentationsInMarkdown FieldSafetyNoticeReportTemplate produces documentation with version number" time="0.014">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown AdverseEventSOP produces documentation" name="DocumentGenerator generateDocumentationsInMarkdown AdverseEventSOP produces documentation" time="0.014">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown BugHandlingProcessSOP produces documentation" name="DocumentGenerator generateDocumentationsInMarkdown BugHandlingProcessSOP produces documentation" time="0.013">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown CyberSecurity generates document if all fields are provided" name="DocumentGenerator generateDocumentationsInMarkdown CyberSecurity generates document if all fields are provided" time="0.013">
    </testcase>
    <testcase classname="DocumentGenerator generateDocumentationsInMarkdown CyberSecurity generates document using default values if config is not provided" name="DocumentGenerator generateDocumentationsInMarkdown CyberSecurity generates document using default values if config is not provided" time="0.012">
    </testcase>
  </testsuite>
</testsuites>
